工作区  add    暂存区   commit   版本库

初始化
	初始化一个Git仓库，使用git init命令。
	
	添加文件到Git仓库，分两步：
	
	第一步，使用命令git add <file>，注意，可反复多次使用，添加多个文件；
	
	第二步，使用命令git commit <-m <提交信息>>，完成

查看状态

	要随时掌握工作区的状态，使用git status命令。
	
	如果git status告诉你有文件被修改过，用git diff可以查看修改内容

回滚版本库

	HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。
	
	穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。
	
	可用git log --pretty=oneline 
	
	要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本
	
回滚工作区	

	命令git checkout -- file意思就是，把file文件在工作区的修改全部撤销，这里有两种情况：

	一种是file自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；
	
	一种是file已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。
	
	总之，就是让这个文件回到最近一次git commit或git add时的状态。
	
回滚暂存区	

	命令git reset HEAD file可以把暂存区的修改撤销掉（unstage),而工作区不会改变
	
关联远程仓库

	要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；
	
推送内容到远程仓库
	git remote add origin git@github.com:fengzp/git-note.git
	git push -u origin master

	关联后，使用命令git push -u origin master第一次推送master分支的所有内容；
	
	此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；
	
	
	
克隆远程仓库

	git clone git@github.com:fengzp/WeiXinTest.git
	
分支
  
  查看分支：git branch

	创建分支：git branch <name>
	
	切换分支：git checkout <name>
	
	创建+切换分支：git checkout -b <name>
		加上-b参数表示创建并切换，相当于以下两条命令：	
		$ git branch dev
		$ git checkout dev
	
	合并某分支到当前分支：git merge <name>
	 git merge --no-ff -m "merge with no-ff" dev
	
	删除分支：git branch -d <name>
	强行删除分支：git branch -D <name>
	
	查看分支合并图：git log --graph
		git log --graph --pretty=oneline --abbrev-commit
	
	储藏分支：git stash 
		查看：git stash list
		恢复：git stash apply(恢复后，stash内容并不删除)
		删除：git stash drop
		恢复并删除：git stash pop
		
	标签		
		添加标签：
			git tag <name>用于新建一个标签，默认为HEAD
			git tag -a <tagname> -m "<message>" <commitid>
			
		命令git push origin <tagname>可以推送一个本地标签；

		命令git push origin --tags可以推送全部未推送过的本地标签；
		
		命令git tag -d <tagname>可以删除一个本地标签；
		
		命令git push origin :refs/tags/<tagname>可以删除一个远程标签。
		
		
每个仓库的Git配置文件都放在.git/config文件中
当前用户的Git配置文件放在用户主目录下的一个隐藏文件.gitconfig中
修改git的ssh文件在当前用户下.ssh目录

修改别名：git config --global alias.co checkout

	lg = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit
        co = checkout
        cm = commit
        bh = branch
        st = status
